rm(list=ls())
library(rio)
library(car)
passcount=import("Assignment Data.xlsx")
colnames(passcount)=tolower(make.names(colnames(passcount)))
passcount
str(passcount)
head(passcount)
tail(passcount)
passcount$timeindex=seq(1:nrow(passcount))
str(passcount)
head(passcount)
tail(passcount)
attach(passcount)
#Question 1
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers")
#Question 2
passcount.out=lm(passengers~timeindex,data=passcount)
summary(passcount.out)
#Question 3
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers w/ Regression Line")
abline(passcount.out,col="magenta",lwd=3)
#Question 4
durbinWatsonTest(passcount.out)
#Question 5
indices=data.frame(month=1:12,average=0,index=0)
for(i in 1:12) {
count=0
for(j in 1:nrow(passcount)) {
if(i==passcount$month[j]) {
indices$average[i]=indices$average[i]+passcount$passengers[j]
count=count+1
}
}
indices$average[i]=indices$average[i]/count
indices$index[i]=indices$average[i]/mean(passcount$passengers)
}
for(i in 1:12){
for(j in 1:nrow(passcount)){
if(i==passcount$month[j]){
passcount$deseason.passengers[j]=passcount$passengers[j]/indices$index[i]
}
}
}
tail(passcount)
indices
#Question 6
#Linear model with deseasonalized data
plot(timeindex,passcount$deseason.passengers,type="o",pch=19,main="Deseasonalized Time Series of Passengers w/ Regression Line")
passcount.baselm=lm(deseason.passengers~timeindex,data=passcount)
points(passcount$timeindex,passcount.baselm$fitted.values,type="o",pch=19,col="magenta")
tail(passcount)
# Question 7
# Reseasonalize the data
for(j in 1:nrow(passcount)) {
xx=passcount$month[j]
passcount$reseason.y.hat[j]=passcount.baselm$fitted.values[j]*indices$index[xx]
passcount$reseason.error[j]=passcount$passengers[j]-passcount$reseason.y.hat[j]
}
plot(timeindex,passengers,type="o",lwd=2,data="passcount",main=paste("Time Series of Passenger Data vs. Reseasoned Fitted Values Regression Lines / r = ",round(cor(passengers,passcount$reseason.y.hat),3)))
points(timeindex,passcount$reseason.y.hat,type="l",col="red",lwd=2)
rm(list=ls())
library(rio)
allflightdata=import("Assignment Data.xlsx")
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
allflightdata
str(allflightdata)
head(allflightdata)
tail(allflightdata)
flightdata=subset(allflightdata,origin=="LAS")
flightdata=rbind(flightdata,subset(allflightdata,origin=="LAX"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="BWI"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="LGA"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="MCI"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="MCO"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="ATL"))
flightdata=rbind(flightdata,subset(allflightdata,origin=="BNA"))
set.seed(6933)
flightdatasample=flightdata[sample(1:nrow(flightdata),50),]
flightdatasample$origin=as.factor(flightdatasample$origin)
flightdatasample$destination=as.factor(flightdatasample$destination)
flightdatasample$market.leading.airline=as.factor(flightdatasample$market.leading.airline)
flightdatasample$low.price.airline=as.factor(flightdatasample$low.price.airline)
#Analysis
str(flightdatasample)
head(flightdatasample)
tail(flightdatasample)
attach(flightdatasample)
table(origin)
continuousflightdata=flightdatasample[,c(3,4,5,7,9)]
plot(continuousflightdata,pch=19,upper.panel=NULL)
reg.flight=lm(price~average.fare+distance+avg.weekly.passengers+route.market.share+origin,data=flightdatasample)
summary(reg.flight)
par(mfrow=c(2,2))
#Linearity
plot(price,reg.flight$fitted.values, pch=19,main="Linearity Plot with Reg Line")
abline(reg.flight,lwd=3,col="magenta")
#Normality
qqnorm(rstandard(reg.flight),pch=19, main="Normality Residual Plot")
qqline(rstandard(reg.flight),lwd=3,col="magenta")
hist(reg.flight$residuals,col="steelblue", main="Normality Residual Histogram", xlim=c(-70,60),probability=TRUE)
curve(dnorm(x,mean(reg.flight$residuals), sd(reg.flight$residuals)), from=-70, to=60, lwd=3,col="magenta",add=TRUE)
#Equality of Variance
plot(rstandard(reg.flight), ylim=c(-3.5,3.5),pch=19,main="Equality of Variances Plot")
abline(0,0,lwd=3,col="magenta")
abline(-3,0,lwd=3,col="coral4")
abline(3,0,lwd=3,col="coral4")
par(mfrow=c(1,1))
#Independence
car::durbinWatsonTest(reg.flight)
flightdatasample[which.max(abs(reg.flight$residuals)),c(1,2,9)]
flightdatasample[which.min(abs(reg.flight$residuals)),c(1,2,9)]
rm(list=ls())
library(rio)
allflightdata=import("Assignment Data.xlsx")
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
allflightdata
str(allflightdata)
head(allflightdata)
tail(allflightdata)
flightdata=subset(allflightdata,origin=="LAS")
flightdata=rbind(flightdata,subset(allflightdata,origin=="LAX"))
allflightdata
allflightdata
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
rm(list=ls())
library(rio)
allflightdata=import("Assignment Data.xlsx")
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
allflightdata
str(allflightdata)
head(allflightdata)
tail(allflightdata)
allflightdata=import("Assignment Data.xlsx")
warnings()
rm(list=ls())
library(rio)
allflightdata=import("Assignment Data.xlsx")
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
allflightdata
rm(list=ls())
library(rio)
allflightdata=import("Assignment Data.xlsx")
colnames(allflightdata)=tolower(make.names(colnames(allflightdata)))
allflightdata
rm(list=ls())
library(rio)
library(car)
passcount=import("Assignment Data.xlsx")
colnames(passcount)=tolower(make.names(colnames(passcount)))
passcount
str(passcount)
head(passcount)
tail(passcount)
passcount$timeindex=seq(1:nrow(passcount))
str(passcount)
head(passcount)
tail(passcount)
attach(passcount)
#Question 1
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers")
#Question 2
passcount.out=lm(passengers~timeindex,data=passcount)
summary(passcount.out)
#Question 3
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers w/ Regression Line")
abline(passcount.out,col="magenta",lwd=3)
#Question 4
durbinWatsonTest(passcount.out)
#Question 5
indices=data.frame(month=1:12,average=0,index=0)
for(i in 1:12) {
count=0
for(j in 1:nrow(passcount)) {
if(i==passcount$month[j]) {
indices$average[i]=indices$average[i]+passcount$passengers[j]
count=count+1
}
}
indices$average[i]=indices$average[i]/count
indices$index[i]=indices$average[i]/mean(passcount$passengers)
}
for(i in 1:12){
for(j in 1:nrow(passcount)){
if(i==passcount$month[j]){
passcount$deseason.passengers[j]=passcount$passengers[j]/indices$index[i]
}
}
}
tail(passcount)
indices
#Question 6
#Linear model with deseasonalized data
plot(timeindex,passcount$deseason.passengers,type="o",pch=19,main="Deseasonalized Time Series of Passengers w/ Regression Line")
passcount.baselm=lm(deseason.passengers~timeindex,data=passcount)
points(passcount$timeindex,passcount.baselm$fitted.values,type="o",pch=19,col="magenta")
tail(passcount)
# Question 7
# Reseasonalize the data
for(j in 1:nrow(passcount)) {
xx=passcount$month[j]
passcount$reseason.y.hat[j]=passcount.baselm$fitted.values[j]*indices$index[xx]
passcount$reseason.error[j]=passcount$passengers[j]-passcount$reseason.y.hat[j]
}
plot(timeindex,passengers,type="o",lwd=2,data="passcount",main=paste("Time Series of Passenger Data vs. Reseasoned Fitted Values Regression Lines / r = ",round(cor(passengers,passcount$reseason.y.hat),3)))
points(timeindex,passcount$reseason.y.hat,type="l",col="red",lwd=2)
rm(list=ls())
library(rio)
library(car)
passcount=import("Assignment Data.xlsx")
colnames(passcount)=tolower(make.names(colnames(passcount)))
passcount
str(passcount)
head(passcount)
tail(passcount)
passcount$timeindex=seq(1:nrow(passcount))
str(passcount)
head(passcount)
tail(passcount)
attach(passcount)
#Question 1
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers")
#Question 2
passcount.out=lm(passengers~timeindex,data=passcount)
summary(passcount.out)
#Question 3
plot(timeindex,passengers,pch=19,type="o",main="Time Series of Passengers w/ Regression Line")
abline(passcount.out,col="magenta",lwd=3)
#Question 4
durbinWatsonTest(passcount.out)
#Question 5
indices=data.frame(month=1:12,average=0,index=0)
for(i in 1:12) {
count=0
for(j in 1:nrow(passcount)) {
if(i==passcount$month[j]) {
indices$average[i]=indices$average[i]+passcount$passengers[j]
count=count+1
}
}
indices$average[i]=indices$average[i]/count
indices$index[i]=indices$average[i]/mean(passcount$passengers)
}
for(i in 1:12){
for(j in 1:nrow(passcount)){
if(i==passcount$month[j]){
passcount$deseason.passengers[j]=passcount$passengers[j]/indices$index[i]
}
}
}
tail(passcount)
indices
#Question 6
#Linear model with deseasonalized data
plot(timeindex,passcount$deseason.passengers,type="o",pch=19,main="Deseasonalized Time Series of Passengers w/ Regression Line")
passcount.baselm=lm(deseason.passengers~timeindex,data=passcount)
points(passcount$timeindex,passcount.baselm$fitted.values,type="o",pch=19,col="magenta")
tail(passcount)
# Question 7
# Reseasonalize the data
for(j in 1:nrow(passcount)) {
xx=passcount$month[j]
passcount$reseason.y.hat[j]=passcount.baselm$fitted.values[j]*indices$index[xx]
passcount$reseason.error[j]=passcount$passengers[j]-passcount$reseason.y.hat[j]
}
plot(timeindex,passengers,type="o",lwd=2,data="passcount",main=paste("Time Series of Passenger Data vs. Reseasoned Fitted Values Regression Lines / r = ",round(cor(passengers,passcount$reseason.y.hat),3)))
points(timeindex,passcount$reseason.y.hat,type="l",col="red",lwd=2)
